;;(global-font-lock-mode 1 t)

(setq default-frame-alist
      '(
	(background-color . "black")
	(foreground-color . "wheat")
))

;; Set up load path
(defvar home-dir)
(setq home-dir (concat (expand-file-name "~") "/"))
(setq load-path (append (list (concat home-dir "")
			      (concat home-dir "site-lisp"))
                        load-path))

(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)

(global-set-key [f2] 'other-window)       ;convenient shortcuts.
(global-set-key [f3] 'kill-this-buffer)

(require 'ebuff-menu)
(define-key global-map                    [f12] 'electric-buffer-list)
(define-key electric-buffer-menu-mode-map [f12] 'Electric-buffer-menu-quit)

;; next- and previous-buffer
(defalias 'next-buffer 'bury-buffer)
(defun previous-buffer () "switches to previous buffer"
  (interactive)
  (while (progn
	   (switch-to-buffer (car (last (buffer-list))))
	   (string= " " (substring (buffer-name) 0 1)))))

;; bind them
;;(global-set-key [(control kp-add)] 'previous-buffer)
(global-set-key (kbd "C-+") 'previous-buffer)
(global-set-key (kbd "C--") 'next-buffer)

;;visual basic
(autoload 'visual-basic-mode "visual-basic-mode" "Visual Basic mode." t)
(setq auto-mode-alist (append '(("\\.\\(frm\\|bas\\|cls\\)$" . 
				 visual-basic-mode)) auto-mode-alist))

;;velocity
(autoload 'turn-on-vtl-mode "vtl" nil t)
(add-hook 'html-mode-hook 'turn-on-vtl-mode t t)
(add-hook 'xml-mode-hook 'turn-on-vtl-mode t t)
(add-hook 'text-mode-hook 'turn-on-vtl-mode t t)

;;mapserver
(defvar mapserver-keywords
  '("NAME" "STATUS" "SIZE" "TRANSPARENT" "SYMBOLSET" "FONTSET" "DEBUG" "MAXSIZE" "IMAGETYPE" "DATAPATTERN" "OUTPUTFORMAT" "DRIVER" "IMAGEMODE" "PROJECTION" "UNITS" "EXTENT" "WEB" "LAYER" "END" "CLASS" "STYLE" "METADATA" "SYMBOL" "WIDTH" "COLOR" "CONNECTIONTYPE" "DATA" "PROCESSING")
  "MAPSERVER keywords.")

(defvar mapserver-keywords-regexp (regexp-opt mapserver-keywords 'words))

;;(setq mapserver-keywords nil)

(setq mapserver-font-lock-keywords
  `(
    (,mapserver-keywords-regexp . font-lock-function-name-face)
))

(define-derived-mode mapserver-mode fundamental-mode
  (setq font-lock-defaults '((mapserver-font-lock-keywords)))
)

(setq auto-mode-alist (cons '("\.map\\'" . mapserver-mode) auto-mode-alist))

;; d-mode
(autoload 'd-mode "d-mode" "Major mode for editing D code." t)
(add-to-list 'auto-mode-alist '("\\.d[i]?\\'" . d-mode))

;;ruby
(autoload 'ruby-mode "ruby-mode"
  "Mode for editing ruby source files" t)
(setq auto-mode-alist
      (append '(("\\.rb$" . ruby-mode)) auto-mode-alist))
(setq interpreter-mode-alist (append '(("ruby" . ruby-mode))
				     interpreter-mode-alist))

(autoload 'run-ruby "inf-ruby"
  "Run an inferior Ruby process")
(autoload 'inf-ruby-keys "inf-ruby"
  "Set local key defs for inf-ruby in ruby-mode")
(add-hook 'ruby-mode-hook
	  '(lambda ()
	     (inf-ruby-keys)
	     ))

;; drag and drop os x
(define-key global-map [ns-drag-file] 'my-ns-open-files)
(defun my-ns-open-files ()
  "Open files in the list `ns-input-file'."
  (interactive)
  (mapc 'find-file ns-input-file)
  (setq ns-input-file nil))

;;org-mode
(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)

;;asciidoc mode
(add-to-list 'auto-mode-alist '("\\.adoc$" . doc-mode))
(autoload 'doc-mode "doc-mode")

(setq x-super-keysym 'meta)

(require 'haml-mode)

(load-file "site-lisp/graphviz-dot-mode.el") 

(require 'epa)
(epa-file-enable)
(setq epg-gpg-program "/usr/local/bin/gpg")