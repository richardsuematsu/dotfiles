;;(global-font-lock-mode 1)

;;-- emacs visual appearance
(defun set-visual-preferences ()
  "Setup visual preferences."
  (set 'frame-title-format '("Emacs "    " -- " " %b"))
  (set 'default-frame-alist '((top . 25) (left . 50) 
                              (width . 80) (height . 55)
					; (background-color . "DarkSlateGrey")
					; (background-color . "Black")
			      (background-color . "grey20")
			      (foreground-color . "Wheat")
			      (cursor-color     . "Beige")
                              (menu-bar-lines . 1)))
  ;;(set-default-font 
  ;; "-*-Lucida Console-normal-r-*-*-13-97-96-96-c-*-iso8859-1")
  (message "Visual preferences are set."))
(set-visual-preferences)

;; Turn on syntax coloring
(cond ((fboundp 'global-font-lock-mode)
	   ;; Turn on font-lock in all modes that support it
	   (global-font-lock-mode t)
	   ;; maximum colors
	   (setq font-lock-maximum-decoration t)))


;; To use resize-minibuffer-mode, uncomment this and include in your .emacs:
;;(resize-minibuffer-mode)


(global-set-key [f2] 'other-window)       ;convenient shortcuts.
(global-set-key [f3] 'kill-this-buffer)

(require 'ebuff-menu)
(define-key global-map                    [f12] 'electric-buffer-list)
(define-key electric-buffer-menu-mode-map [f12] 'Electric-buffer-menu-quit)

;; next- and previous-buffer
(defalias 'next-buffer 'bury-buffer)
(defun previous-buffer () "switches to previous buffer"
  (interactive)
  (while (progn
	   (switch-to-buffer (car (last (buffer-list))))
	   (string= " " (substring (buffer-name) 0 1)))))

;; bind them
(global-set-key [(control kp-add)] 'previous-buffer)
(global-set-key [(control kp-subtract)] 'next-buffer)

;;visual basic
(autoload 'visual-basic-mode "visual-basic-mode" "Visual Basic mode." t)
(setq auto-mode-alist (append '(("\\.\\(frm\\|bas\\|cls\\)$" . 
				 visual-basic-mode)) auto-mode-alist))

;;velocity
(autoload 'turn-on-vtl-mode "vtl" nil t)
(add-hook 'html-mode-hook 'turn-on-vtl-mode t t)
(add-hook 'xml-mode-hook 'turn-on-vtl-mode t t)
(add-hook 'text-mode-hook 'turn-on-vtl-mode t t)

;;aspell
(setq-default ispell-program-name "c:/Program Files/Aspell/bin/aspell.exe")
(setq ispell-dictionary "american")
(setq flyspell-default-dictionary "american")

;;printer
(setq printer-name "\\Kawakawa\Xerox WorkCentre Pro 40 C PS BW")

;;mapserver
(defvar mapserver-keywords
  '("NAME" "STATUS" "SIZE" "TRANSPARENT" "SYMBOLSET" "FONTSET" "DEBUG" "MAXSIZE" "IMAGETYPE" "DATAPATTERN" "OUTPUTFORMAT" "DRIVER" "IMAGEMODE" "PROJECTION" "UNITS" "EXTENT" "WEB" "LAYER" "END" "CLASS" "STYLE" "METADATA" "SYMBOL" "WIDTH" "COLOR" "CONNECTIONTYPE" "DATA" "PROCESSING")
  "MAPSERVER keywords.")

(defvar mapserver-keywords-regexp (regexp-opt mapserver-keywords 'words))

;;(setq mapserver-keywords nil)

(setq mapserver-font-lock-keywords
  `(
    (,mapserver-keywords-regexp . font-lock-function-name-face)
))

(define-derived-mode mapserver-mode fundamental-mode
  (setq font-lock-defaults '((mapserver-font-lock-keywords)))
)

(setq auto-mode-alist (cons '("\.map\\'" . mapserver-mode) auto-mode-alist))

;; d-mode
(autoload 'd-mode "d-mode" "Major mode for editing D code." t)
(add-to-list 'auto-mode-alist '("\\.d[i]?\\'" . d-mode))

;;ruby
(autoload 'ruby-mode "ruby-mode"
  "Mode for editing ruby source files" t)
(setq auto-mode-alist
	  (append '(("\\.rb$" . ruby-mode)) auto-mode-alist))
(setq interpreter-mode-alist (append '(("ruby" . ruby-mode))
				     interpreter-mode-alist))
(autoload 'run-ruby "inf-ruby"
  "Run an inferior Ruby process")
(autoload 'inf-ruby-keys "inf-ruby"
  "Set local key defs for inf-ruby in ruby-mode")
(add-hook 'ruby-mode-hook
          '(lambda ()
             (inf-ruby-keys)
			 ))

;;nxml
;;(load "c:/Program Files/emacs/site-lisp/nxml-mode-20041004/rng-auto.el")
;;(setq auto-mode-alist
;;	  (cons '("\\.\\(xml\\|xsl\\|rng\\|xhtml\\|axl\\)\\'" . nxml-mode)
;;			auto-mode-alist))

;;org-mode
(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)

;;asciidoc mode
(add-to-list 'auto-mode-alist '("\\.adoc$" . doc-mode))
(autoload 'doc-mode "doc-mode")

(require 'haml-mode)

(load-file "site-lisp/graphviz-dot-mode.el") 

(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(nxhtml-load t)
 '(pr-gs-command "c:\\Program Files\\gs\\gs8.53\\bin\\gswin32c.exe")
 '(pr-gv-command "C:\\Program Files\\Ghostgum\\gsview\\gsview32.exe")
 '(tab-width 4)
 '(transient-mark-mode (quote identity)))
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 )

